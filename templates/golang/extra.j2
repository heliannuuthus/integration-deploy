{% set init -%}
{% raw -%}
- uses: actions/setup-go@v5
  with:
    go-version: '1.20'
    cache: false

- name: restore golang cache
  uses: actions/cache/restore@v4
  id: cache-restore-golang
  env:
    cache-name: cache-gomod
  with:
    path: |
      ~/go
    key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
    restore-keys: |
      ${{ runner.os }}-golang-store-${{ env.cache-name }}-

- name: setup
  if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
  run: |
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1
    curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
    go install gotest.tools/gotestsum@v1.12.0

- name: cache gomod cache
  if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
  id: cache-save-golang
  uses: actions/cache/save@v4
  env:
    cache-name: cache-gomod
  with:
    path: |
      ~/go
    key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
{% endraw %}
{%- endset %}

{% set env -%}
{% raw -%}
- id: environments
  name: environments
  run: |
    version=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.1.0")
    version=${version#v}
    version="$version-$(git rev-parse --short HEAD)"
    project=$(go list -m)
    echo "
    project=${project##*/}
    version=$version
    " >> "$GITHUB_OUTPUT"
  shell: bash
{% endraw %}
{%- endset %}

{% set lint -%}
- name: golangci-lint
  run: |
    go version
    golangci-lint -vv
{% endset %}

{% set sec_scan -%}
- name: gosec checkout
  run: |
    mkdir -p build
    gosec -fmt=json -out=build/gosec-report.json -stdout -verbose=text *.go
    tree
{% endset %}

{% set build -%}
{% raw -%}
- name: build binary
  run: |
    mkdir -p build
    CGO_ENABLE=0 GOOS=${{ inputs.GOOS }} GOARCH=${{ inputs.GOARCH }} go build -a -o build/${{ steps.environments.outputs.project }} ${{ inputs.ENTRANCE }}

- name: test
  run: |
    mkdir -p build/test-results

    for dir in $(find . -name "go.mod" -not -path "./vendor/*" -exec dirname {} \;); do
      module_name=$(basename $dir)
      echo "Testing module: $module_name"
      
      gotestsum --format testname \
        --junitfile "build/test-results/$module_name-report.xml" \
        --jsonfile "build/test-results/$module_name-test.json" \
        --packages="./..." \
        -- -coverprofile="build/test-results/$module_name-coverage.out" \
        ./...
    done

    echo 'mode: count' > build/coverage.out
    find build/test-results -name '*-coverage.out' -exec tail -n +2 {} \; >> build/coverage.out
{%- endraw %}
{%- endset %}
